require('dotenv').config();
const clientPromise = require('./api/lib/mongodb');

const products = [
  {
    name: 'ÿπÿ∑ÿ± ÿπŸàÿØ ŸàŸàÿØ ÿßŸÜÿ™ŸÜÿ≥',
    priceEGP: 450,
    description: 'ÿπÿ∑ÿ± ŸÅÿßÿÆÿ± ÿ®ŸÜŸÅÿ≠ÿßÿ™ ÿßŸÑÿπŸàÿØ ÿßŸÑÿ∫ŸÜŸäÿ© ŸÖÿπ ŸÑŸÖÿ≥ÿßÿ™ ÿÆÿ¥ÿ®Ÿäÿ© ÿØÿßŸÅÿ¶ÿ©',
    collection: 'ÿπŸäŸÜÿßÿ™ ÿ¥ÿ™ŸàŸäÿ©',
    size: '5ml',
    sizes: ['5ml'],
    images: [],
    soldOut: false
  },
  {
    name: 'ÿπÿ∑ÿ± ŸÅÿßŸÜŸäŸÑŸäÿß ÿ®Ÿàÿ±ÿ®ŸàŸÜ',
    priceEGP: 380,
    description: 'ÿπÿ∑ÿ± ÿ≠ŸÑŸà ŸàÿØÿßŸÅÿ¶ ÿ®ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß ŸÖÿπ ŸÑŸÖÿ≥ÿßÿ™ ÿßŸÑÿ®Ÿàÿ±ÿ®ŸàŸÜ',
    collection: 'ÿπŸäŸÜÿßÿ™ ÿ¥ÿ™ŸàŸäÿ©',
    size: '5ml',
    sizes: ['5ml'],
    images: [],
    soldOut: false
  },
  {
    name: 'ÿπÿ∑ÿ± ÿ≥Ÿäÿ™ÿ±Ÿàÿ≥ ÿ®ÿ±Ÿäÿ≤',
    priceEGP: 350,
    description: 'ÿπÿ∑ÿ± ŸÖŸÜÿπÿ¥ Ÿàÿ≠ŸäŸàŸä ÿ®ŸÖÿ≤Ÿäÿ¨ ÿßŸÑÿ≠ŸÖÿ∂Ÿäÿßÿ™ ÿßŸÑŸÖÿ´ÿßŸÑŸä ŸÑŸÑÿµŸäŸÅ',
    collection: 'ÿπŸäŸÜÿßÿ™ ÿµŸäŸÅŸäÿ©',
    size: '5ml',
    sizes: ['5ml'],
    images: [],
    soldOut: false
  },
  {
    name: 'ÿπÿ∑ÿ± ÿ£Ÿàÿ¥ŸÜ ŸÖŸäÿ≥ÿ™',
    priceEGP: 370,
    description: 'ÿπÿ∑ÿ± ŸÖÿßÿ¶Ÿä ŸÖŸÜÿπÿ¥ ÿ®ÿ±ÿßÿ¶ÿ≠ÿ© ÿßŸÑÿ®ÿ≠ÿ±',
    collection: 'ÿπŸäŸÜÿßÿ™ ÿµŸäŸÅŸäÿ©',
    size: '5ml',
    sizes: ['5ml'],
    images: [],
    soldOut: false
  },
  {
    name: 'ÿπÿ∑ÿ± ÿπŸÜÿ®ÿ± ŸÜŸàÿßÿ±',
    priceEGP: 420,
    description: 'ÿπÿ∑ÿ± ÿπŸÜÿ®ÿ± ÿπŸÖŸäŸÇ ÿ®ŸÜŸÅÿ≠ÿßÿ™ ÿ∫ÿßŸÖÿ∂ÿ©',
    collection: 'ÿπŸäŸÜÿßÿ™ ÿ¥ÿ™ŸàŸäÿ©',
    size: '5ml',
    sizes: ['5ml'],
    images: [],
    soldOut: false
  },
  {
    name: 'ÿπÿ∑ÿ± ÿ±Ÿàÿ≤ ÿ¨ÿßÿ±ÿØŸÜ',
    priceEGP: 390,
    description: 'ÿ®ÿßŸÇÿ© Ÿàÿ±ÿØ ÿ£ŸÜŸäŸÇÿ© ÿ®ÿ™ŸÜÿßÿ∫ŸÖ ÿ≤Ÿáÿ±Ÿä',
    collection: 'ÿπŸäŸÜÿßÿ™ ÿµŸäŸÅŸäÿ©',
    size: '5ml',
    sizes: ['5ml'],
    images: [],
    soldOut: false
  },
  {
    name: 'ÿπÿ∑ÿ± ŸÑŸäÿ∞ÿ± ÿ¢ŸÜÿØ ÿ≥ÿ®ÿßŸäÿ≥',
    priceEGP: 460,
    description: 'ÿ¨ŸÑÿØ ÿ¨ÿ±Ÿäÿ° ŸÖÿπ ÿ™Ÿàÿßÿ®ŸÑ ÿ∫ÿ±Ÿäÿ®ÿ©',
    collection: 'ÿπŸäŸÜÿßÿ™ ÿ¥ÿ™ŸàŸäÿ©',
    size: '5ml',
    sizes: ['5ml'],
    images: [],
    soldOut: false
  },
  {
    name: 'ÿπÿ∑ÿ± ÿ™ÿ±Ÿàÿ®ŸäŸÉÿßŸÑ ÿ®ÿßÿ±ÿßÿØÿßŸäÿ≥',
    priceEGP: 360,
    description: 'ŸÅŸàÿßŸÉŸá ÿßÿ≥ÿ™Ÿàÿßÿ¶Ÿäÿ© Ÿàÿ≤ŸáŸàÿ± ÿ∫ÿ±Ÿäÿ®ÿ©',
    collection: 'ÿπŸäŸÜÿßÿ™ ÿµŸäŸÅŸäÿ©',
    size: '5ml',
    sizes: ['5ml'],
    images: [],
    soldOut: false
  }
];

async function seedProducts() {
  console.log('üå± Seeding products to MongoDB...\n');
  
  try {
    const client = await clientPromise;
    const db = client.db('danger-sneakers');
    
    // Clear existing products
    const deleteResult = await db.collection('products').deleteMany({});
    console.log(`üóëÔ∏è  Deleted ${deleteResult.deletedCount} existing products\n`);
    
    // Insert new products
    const insertResult = await db.collection('products').insertMany(
      products.map(p => ({
        ...p,
        createdAt: new Date(),
        updatedAt: new Date()
      }))
    );
    
    console.log(`‚úÖ Inserted ${insertResult.insertedCount} products\n`);
    
    // Verify
    const allProducts = await db.collection('products').find({}).toArray();
    console.log('üì¶ Products in database:');
    allProducts.forEach((p, i) => {
      console.log(`  ${i + 1}. ${p.name} - ${p.priceEGP} EGP`);
    });
    
    console.log('\n‚úÖ Seeding completed successfully!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error seeding products:', error.message);
    process.exit(1);
  }
}

seedProducts();
